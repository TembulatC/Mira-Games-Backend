namespace MiraGamesBackend.Utilities
{
    // Текстовые константы для документации Swagger
    public static class SwaggerTexts
    {
        // Тексты для endpoint получения игр
        public static class GetGames
        {
            public const string Summary = "Данный endpoint получает актуальные данные игр на ноябрь 2025 и записывает их в \"gameinfo.json\"";
            public const string Description = "Обновление данных игр происходит по следующим принципам: Парсинг https://store.steampowered.com/search/?category1=998&filter=comingsoon&ndl=1 для получения ID игр -> Запрос к SteamAPI по ID для получения полной информации об игре -> Запись полученных данных в \"gameinfo.json\"" +
                "<br><br><b>ВНИМАНИЕ!</b>" +
                "<br>1. Данный endpoint не выполняется автоматически. Это нужно для того, что бы вы сами могли контролировать, когда загружать новые данные." +
                "<br>2. Не рекомендуется использовать данный endpoint для парсинга и обновления данных слишком часто так, как данные все равно обновляются 1-2 раза в день, а при частых запросах SteamAPI может вас заблокировать." +
                "<br>3. Обязательно интервал между выполнениями не менее 3 часов, что бы не получить бан по IP от SteamAPI";
        }

        // Тексты для endpoint добавления и обновления данных игр
        public static class AddAndUpdateGamesData
        {
            public const string Summary = "Данный endpoint добавляет новые данные игр из \"gameinfo.json\" в базу данных и обновляет старые при необходимости";
            public const string Description = "Добавление и обновление игр в базу данных происходит по следующим принципам: Выгрузка кэшированных данных из \"gameinfo.json\" -> Запрос к базе данных" +
                "<br><br><b>ВНИМАНИЕ!</b>" +
                "<br>1. Данный endpoint не выполняется автоматически. Это нужно для того, что бы вы сами могли контролировать, когда добавлять и обновлять данные." +
                "<br>2. Если данные новые endpoint их обновляет, а если данных об игре нет(она могла только появится в Steam), то endpoint их добавляет" +
                "<br><br><b>ОБЪЯСНЕНИЕ:</b>" +
                "<br>1. Что бы при добавлении и обновлении данных в базу данных постоянно не обращаться к SteamAPI, мы берем данные из \"gameinfo.json\", который служит кэшем" +
                "<br>2. Сам \"gameinfo.json\" обновляется с помощью endpoint'a <b>/Main/GetGames</b>" +
                "<br><br>Благодаря такой архитектуре мы обращаемся к SteamAPI только одной сессией и когда нам это нужно, а не каждый раз при работе с базой данных"; 
        }

        // Тексты для endpoint получения игр по месяцу
        public static class GetGamesByMonth
        {
            public const string Summary = "Данный endpoint возвращает данные обо всех релизах на указанный месяц";
            public const string Description = "Получение данных происходит по следующему принципу: Вводите год и месяц -> Если данные на эту дату существуют, то данные возвращаются в формате JSON" +
                "<br><br><b>ВНИМАНИЕ!</b>" +
                "<br>1. Дату обязательно надо вводить в формате: YYYY-MM" +
                "<br>2. ID не передаются, только данные об играх, ID заменяются на 0";
        }
        
        // Тексты для endpoint получения данных по календарю
        public static class GetCountGamesByCalendar
        {
            public const string Summary = "Данный endpoint возвращает календарь с данными о количестве релизов по дням";
            public const string Description = "Получение данных происходит по следующему принципу: Вводите год и месяц -> Если данные на эту дату существуют, то они группируются по дням и подсчитываются -> Возврат данных в JSON" +
                "<br><br><b>ВНИМАНИЕ!</b>" +
                "<br>1. Дату обязательно надо вводить в формате: YYYY-MM" +
                "<br>2. ID не передаются, только данные об играх, ID заменяются на 0";
        }

        // Тексты для endpoint получения данных по фильтру
        public static class GetGamesByFilter
        {
            public const string Summary = "Данный endpoint возвращает данные по выбранным фильтрам";
            public const string Description = "Получение данных происходит по следующему принципу: Выбираете в выпадающем списке жанр и платформу -> Если данные с выбранными фильтрами существуют, то они возвращаются в JSON формате" +
                "<br><br><b>ВНИМАНИЕ!</b>" +
                "<br>1. ID не передаются, только данные об играх, ID заменяются на 0";
        }

        // Тексты для endpoint получения популярных жанров
        public static class GetMostPopularGenres
        {
            public const string Summary = "Данный endpoint возвращает Топ-5 жанров по количеству игр в этом жанре";
            public const string Description = "Получение данных происходит по следующему принципу: Вводите год и месяц -> Если данные на эту дату существуют, то жанры группируются и подсчитываются -> Возврат данных в JSON" +
                "<br><br><b>ВНИМАНИЕ!</b>" +
                "<br>1. Дату обязательно надо вводить в формате: YYYY-MM" +
                "<br>2. ID не передаются, только данные об играх, ID заменяются на 0";
        }

        // Тексты для endpoint добавления снимка данных в ClickHouse
        public static class AddChangeDynamic
        {
            public const string Summary = "Данный endpoint создает новый снимок данных и добавляет их в ClickHouse для отслеживания динамики";
            public const string Description = "Добавление снимка данных происходит по следующему принципу: Вызывается метод для получения Топ-5 жанров по количеству игр в этом жанре -> На основе этих данных создается снимок для отслеживания динамики" +
                "<br><br><b>ВНИМАНИЕ!</b>" +
                "<br>1. Данный endpoint не выполняется автоматически";
        }

        // Тексты для endpoint получения динамики изменений
        public static class GetChangeDynamic
        {
            public const string Summary = "Данный endpoint получает динамику изменений за указанный месяц";
            public const string Description = "Получение динамики изменений происходит по следующему принципу: Вводите год и месяц -> Возвращается вся динамика изменений популярности жанров за выбранный месяц -> Данные возвращаются в JSON" +
                "<br><br><b>ВНИМАНИЕ!</b>" +
                "<br>1. Дату обязательно надо вводить в формате: YYYY-MM";
        }
    }
}
